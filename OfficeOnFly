<#
    .SYNOPSIS
        OfficeOnFly

     .DESCRIPTION
        OfficeOnFly is a simple script designed to install the Microsoft Office package. 
        The script consists of a .ps1 file and an XML file. It can be particularly useful when there's no option to distribute a uniform Office configuration with the same set of applications, or when it's not feasible to install everything. 
        This script checks for installed applications and if they are not present on the system, it autonomously adds them to the exclusions in the XML file. 
        The body of the XML file can be retrieved from the Microsoft site https://config.office.com/deploymentsettings.
        It's sufficient not to include excluded apps for the script to function correctly. You can modify the XML file located in the folder with your own settings.
        The script was originally created for distributing the Microsoft Office Suite via Intune. 
        This approach eliminates the need to divide workstations into groups based on installed apps. 
        The operations are carried out autonomously by the script, installing only the applications already present in the system.
       
        To use it on Intune, simply construct a folder comprising a Microsoft Office 365 setup, the OfficeOnFly.ps1 file, and a .bat file if desired.
        At this point, just create the intunewin file and upload the app.


    .AUTHOR
        Alessio Orpellini

    .VERSION
        0.4.3

    .NOTES
        The script can be executed via GPO or distribution software.

    .CONTACT
        Email: alessio.orpellini@gmail.com
        GitHub: https://github.com/DatacorpCloud
    .CREDITS
        Special thanks to Attilio del Rio for his invaluable support during the development process.

    .EXAMPLE
        Powershell.exe -ExecutionPolicy Bypass .\OfficeOnFly.ps1
#>

# Definisci la lista delle applicazioni Office e i loro eseguibili
$apps = @{
    "Word"      = "WINWORD.EXE"
    "Excel"     = "EXCEL.EXE"
    "Access"    = "MSACCESS.EXE"
    "Outlook"   = "OUTLOOK.EXE"
    "Publisher" = "MSPUB.EXE"
    "PowerPoint"= "POWERPNT.EXE"
    "OneNote"   = "ONENOTE.EXE"
    "Visio"     = "VISIO.EXE"
    "Lync"      = "LYNC99.exe"
}

# Funzione per verificare la presenza dell'applicazione
function AppIsInstalled($executable) {
    return (Test-Path "C:\Program Files (x86)\Microsoft Office\root\Office16\$executable") -or 
           (Test-Path "C:\Program Files\Microsoft Office\root\Office16\$executable")
}

# Percorsi dei file XML
$inputXmlPath = $PSScriptRoot+"\"+"Config.xml"
$outputXmlPath = $PSScriptRoot+"\"+"ConfigOK.xml"


# Carica il file XML
[xml]$xmlContent = Get-Content -Path $inputXmlPath

# Ottieni il nodo Product
$productNode = $xmlContent.Configuration.Add.Product

# Verifica se il nodo Product esiste
if ($productNode) {
    # Aggiungi nodi ExcludeApp per le app non installate
    $apps.GetEnumerator() | ForEach-Object {
        if (-not (AppIsInstalled $_.Value)) {
            $excludeNode = $xmlContent.CreateElement("ExcludeApp")
            $excludeNode.SetAttribute("ID", $_.Key)
            $productNode.AppendChild($excludeNode) | Out-Null
        }
    }

    # Salva il file XML modificato
    $xmlContent.OuterXml | Set-Content -Path $outputXmlPath
} else {
    Write-Error "Nodo Product non trovato!"
}


Start-Process .\setup.exe -ArgumentList "/configure configok.xml" -Wait
